// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeapDirection {
  LeapIn
  LeapOut
  Within
}

model Chain {
  id         Int      @id @default(autoincrement())
  name       String
  ws         String
  startBlock Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Block       Block[]
  Transaction Transaction[]
  Address     Address[]
}

model Block {
  id                Int      @id @default(autoincrement())
  chainId           Int
  hash              String
  number            Int
  timestamp         DateTime
  transactionsCount Int
  size              Int
  totalFee          BigInt
  minFee            BigInt
  maxFee            BigInt
  difficulty        BigInt
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  transactions Transaction[]
  chain        Chain         @relation(fields: [chainId], references: [id])

  @@unique([chainId, hash])
  @@unique([chainId, number])
}

model Transaction {
  id            Int            @id @default(autoincrement())
  chainId       Int
  hash          String
  index         String
  blockNumber   Int
  timestamp     DateTime
  fee           BigInt
  size          Int
  isCellbase    Boolean        @default(false)
  isRgbpp       Boolean        @default(false)
  leapDirection LeapDirection?
  inputCount    Int
  outputCount   Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  chain   Chain    @relation(fields: [chainId], references: [id])
  block   Block    @relation(fields: [chainId, blockNumber], references: [chainId, number])
  outputs Output[]

  @@unique([chainId, hash])
}

model Output {
  id               Int      @id @default(autoincrement())
  chainId          Int
  txHash           String
  index            String
  consumedByTxHash String?
  consumedByIndex  String?
  capacity         BigInt
  lockScriptHash   String   @db.Char(66)
  typeScriptHash   String?  @db.Char(66)
  isLive           Boolean  @default(true)
  rgbppBound       Boolean  @default(false)
  boundBtcTxId     String?
  boundBtcTxIndex  Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  transaction Transaction @relation(fields: [chainId, txHash], references: [chainId, hash])
  lockScript  LockScript  @relation(fields: [chainId, lockScriptHash], references: [chainId, scriptHash])
  typeScript  TypeScript? @relation(fields: [chainId, typeScriptHash], references: [chainId, scriptHash])

  @@unique([chainId, txHash, index])
}

model LockScript {
  id            Int      @id @default(autoincrement())
  chainId       Int
  codeHash      String   @db.Char(66)
  hashType      String
  args          String   @db.Text
  scriptHash    String   @unique @db.Char(66)
  isRgbppLock   Boolean  @default(false)
  isBtcTimeLock Boolean  @default(false)
  ownerAddress  Address  @relation(fields: [addressId], references: [id])
  createdTime   DateTime @default(now())
  updatedTime   DateTime @updatedAt

  Output    Output[]
  addressId Int

  @@unique([chainId, id])
  @@unique([chainId, scriptHash])
}

model TypeScript {
  id          Int      @id @default(autoincrement())
  chainId     Int
  codeHash    String   @db.Char(66)
  hashType    String
  args        String   @db.Text
  scriptHash  String   @unique @db.Char(66)
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt

  Output Output[]

  @@unique([chainId, id])
  @@unique([chainId, scriptHash])
}

model Asset {
  id             Int     @id @default(autoincrement())
  blockNumber    Int
  txHash         String
  index          String
  chainId        Int
  lockScriptHash String  @db.Char(66)
  typeScriptHash String  @db.Char(66)
  assetTypeId    Int
  isLive         Boolean @default(true)

  AssetType AssetType @relation(fields: [chainId, assetTypeId], references: [chainId, id])

  @@unique([chainId, txHash, index])
}

model AssetType {
  id          Int      @id @default(autoincrement())
  chainId     Int
  codeHash    String   @db.Char(66)
  hashType    String
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt
  Asset       Asset[]

  @@unique([chainId, id])
  @@unique([chainId, codeHash, hashType])
}

enum LayerType {
  L1
  L2
}

model Address {
  id         Int          @id @default(autoincrement())
  address    String       @unique
  layer      LayerType
  Chain      Chain?       @relation(fields: [chainId], references: [id])
  chainId    Int?
  LockScript LockScript[]
}
